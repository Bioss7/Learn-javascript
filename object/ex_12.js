// Проверка существования свойства, оператор «in»

// В отличие от многих других языков, особенность JavaScript-объектов в том, что можно получить доступ к любому свойству. 
// Даже если свойства не существует – ошибки не будет!

// При обращении к свойству, которого нет, возвращается undefined. Это позволяет просто проверить существование свойства:

let user = {};

console.log(user.noSuchProperty === undefined); // true означает "свойства нет"

// Также существует специальный оператор "in" для проверки существования свойства в объекте.

let user1 = { name: "John", age: 30 };

console.log("user.age существует", ("age" in user1)); // true, user.age существует
console.log("user.blabla не существует", ("blabla" in user1)); // false, user.blabla не существует

let user2 = { age: 30 };

let key = "age";
console.log("имя свойства было взято из переменной key:", key in user2); // true, имя свойства было взято из переменной key

// Для чего вообще нужен оператор in? Разве недостаточно сравнения с undefined?
// В большинстве случаев прекрасно сработает сравнение с undefined. Но есть особый случай, когда оно не подходит, и нужно использовать "in".
// Это когда свойство существует, но содержит значение undefined:

let obj = {
    test: undefined
};

console.group("obj undefined");
console.log("выведет undefined, значит свойство не существует?", obj.test); //  выведет undefined, значит свойство не существует?
console.log("true, свойство существует!", ("test" in obj)); // true, свойство существует!
console.groupEnd();